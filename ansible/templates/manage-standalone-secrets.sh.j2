#!/bin/bash
# =====================================
# 独立密钥管理脚本
# 管理各个独立服务的密钥
# =====================================

set -euo pipefail

# 配置
AWS_REGION="{{ aws_region | default('us-east-1') }}"
DATA_DIR="/data"

# 颜色输出
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# 检查 AWS CLI
check_aws() {
    if ! command -v aws >/dev/null 2>&1; then
        log_error "AWS CLI 未安装"
        return 1
    fi
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        log_error "AWS CLI 未配置或认证失败"
        return 1
    fi
    return 0
}

# 上传服务密钥
upload_service_secret() {
    local service_name="$1"
    local service_dir="$DATA_DIR/$service_name"
    local env_file="$service_dir/.env"
    
    if [[ ! -f "$env_file" ]]; then
        log_error "环境文件不存在: $env_file"
        return 1
    fi

    local parameter_name="/$service_name/.env"
    
    log_info "上传 $service_name 的密钥到 Parameter Store: $parameter_name"
    
    if aws ssm put-parameter \
        --name "$parameter_name" \
        --value "file://$env_file" \
        --type "SecureString" \
        --overwrite \
        --region "$AWS_REGION" >/dev/null 2>&1; then
        log_success "成功上传: $parameter_name"
    else
        log_error "上传失败: $parameter_name"
        return 1
    fi
}

# 下载服务密钥
download_service_secret() {
    local service_name="$1"
    local service_dir="$DATA_DIR/$service_name"
    local env_file="$service_dir/.env"
    local parameter_name="/$service_name/.env"
    
    log_info "从 Parameter Store 下载 $service_name 的密钥"
    
    # 备份现有文件
    if [[ -f "$env_file" ]]; then
        cp "$env_file" "${env_file}.backup.$(date +%s)"
        log_info "已备份现有环境文件"
    fi
    
    if aws ssm get-parameter \
        --name "$parameter_name" \
        --with-decryption \
        --query 'Parameter.Value' \
        --output text \
        --region "$AWS_REGION" > "$env_file" 2>/dev/null; then
        log_success "成功下载: $env_file"
        chmod 600 "$env_file"
    else
        log_error "下载失败: $parameter_name"
        return 1
    fi
}

# 列出所有服务
list_services() {
    log_info "所有服务:"
    if [[ -d "$DATA_DIR" ]]; then
        for service_dir in "$DATA_DIR"/*/; do
            if [[ -d "$service_dir" ]]; then
                local service_name=$(basename "$service_dir")
                local status="Not configured"
                if [[ -f "$service_dir/.env" ]]; then
                    local modified=$(stat -c %y "$service_dir/.env" 2>/dev/null || stat -f %m "$service_dir/.env" 2>/dev/null || echo "Unknown")
                    status="✓ ($modified)"
                fi
                echo "  - $service_name: $status"
            fi
        done
    fi
}

# 列出远程密钥
list_remote_secrets() {
    log_info "Parameter Store 中的密钥:"
    
    aws ssm describe-parameters \
        --parameter-filters "Key=Name,Option=BeginsWith,Values=/" \
        --region "$AWS_REGION" \
        --query 'Parameters[?ends_with(Name, `.env`)].{Name:Name,Type:Type,LastModified:LastModifiedDate}' \
        --output table
}

# 批量上传
batch_upload() {
    local failed_services=()
    
    log_info "批量上传所有服务密钥"
    
    # 上传所有服务
    if [[ -d "$DATA_DIR" ]]; then
        for service_dir in "$DATA_DIR"/*/; do
            if [[ -d "$service_dir" ]]; then
                local service_name=$(basename "$service_dir")
                if [[ -f "$service_dir/.env" ]]; then
                    if upload_service_secret "$service_name"; then
                        log_success "上传成功: $service_name"
                    else
                        failed_services+=("$service_name")
                    fi
                fi
            fi
        done
    fi
    
    if [[ ${#failed_services[@]} -gt 0 ]]; then
        log_error "失败的服务: ${failed_services[*]}"
        return 1
    fi
    
    log_success "所有服务密钥上传完成"
}

# 批量下载
batch_download() {
    local failed_services=()
    
    log_info "批量下载所有服务密钥"
    
    # 获取所有参数
    local parameters=$(aws ssm describe-parameters \
        --parameter-filters "Key=Name,Option=BeginsWith,Values=/" \
        --region "$AWS_REGION" \
        --query 'Parameters[?ends_with(Name, `.env`)].Name' \
        --output text)
    
    for parameter_name in $parameters; do
        # 从 parameter_name 提取服务名 (如 /myapp/.env -> myapp)
        local service_name=$(echo "$parameter_name" | sed 's|^/||' | sed 's|/.env$||')
        
        if download_service_secret "$service_name"; then
            log_success "下载成功: $service_name"
        else
            failed_services+=("$service_name")
        fi
    done
    
    if [[ ${#failed_services[@]} -gt 0 ]]; then
        log_error "失败的服务: ${failed_services[*]}"
        return 1
    fi
    
    log_success "所有服务密钥下载完成"
}

# 显示使用说明
show_usage() {
    cat << EOF
独立服务密钥管理工具

用法: $0 <command> [service_name]

命令:
    upload <service>       - 上传指定服务的密钥到 AWS Parameter Store
    download <service>     - 从 AWS Parameter Store 下载指定服务的密钥
    list-local             - 列出本地服务和配置状态
    list-remote            - 列出 Parameter Store 中的所有密钥
    batch-upload           - 批量上传所有服务密钥
    batch-download         - 批量下载所有服务密钥

服务名称:
    所有服务: postgres, redis, caddy, myapp, ... (所有 /data 下的目录名)

示例:
    $0 upload postgres
    $0 download myapp
    $0 list-local
    $0 batch-upload

Parameter Store 结构:
    /postgres/.env         - PostgreSQL 服务密钥
    /redis/.env           - Redis 服务密钥
    /caddy/.env           - Caddy 服务密钥
    /myapp/.env           - myapp 应用密钥
    /anotherapp/.env      - anotherapp 应用密钥

注意: 请确保已正确配置 AWS CLI 凭证和权限
EOF
}

# 主函数
main() {
    case "${1:-}" in
        upload)
            check_aws || exit 1
            if [[ $# -lt 2 ]]; then
                log_error "用法: $0 upload <service_name>"
                exit 1
            fi
            upload_service_secret "$2"
            ;;
        download)
            check_aws || exit 1
            if [[ $# -lt 2 ]]; then
                log_error "用法: $0 download <service_name>"
                exit 1
            fi
            download_service_secret "$2"
            ;;
        list-local)
            list_services
            ;;
        list-remote)
            check_aws || exit 1
            list_remote_secrets
            ;;
        batch-upload)
            check_aws || exit 1
            batch_upload
            ;;
        batch-download)
            check_aws || exit 1
            batch_download
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            log_error "未知命令: ${1:-}"
            echo
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
