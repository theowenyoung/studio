---
# 验证安全相关服务是否正常运行
- name: Check SSH service status
  systemd:
    name: "{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}"
  register: ssh_service
  tags: [verify, ssh]

- name: Verify SSH is running
  assert:
    that:
      - ssh_service.status.ActiveState == "active"
    fail_msg: "SSH service is not running properly"
    success_msg: "SSH service is running"
  tags: [verify, ssh]
- name: Check firewall status (firewalld)
  systemd:
    name: firewalld
  register: firewall_service
  tags: [verify, firewall]

- name: Verify firewall is active
  command: firewall-cmd --state
  register: firewall_status
  changed_when: false
  ignore_errors: yes
  tags: [verify, firewall]

- name: Get firewall zones and rules
  command: firewall-cmd --list-all
  register: firewall_rules
  changed_when: false
  when: firewall_status.rc == 0
  tags: [verify, firewall]

- name: Display firewall status
  debug:
    msg: 
      - "Firewall status: {{ firewall_status.stdout | default('Not running') }}"
      - "{{ firewall_rules.stdout_lines | default([]) }}"
  when: firewall_status is defined
  tags: [verify, firewall]
- name: Check fail2ban service (production only)
  systemd:
    name: fail2ban
  register: fail2ban_service
  when: 
    - deploy_environment == "production"
    - security_fail2ban_enabled | default(true)
  ignore_errors: yes
  tags: [verify, fail2ban]

- name: Verify fail2ban is running (production only)
  assert:
    that:
      - fail2ban_service.status.ActiveState == "active"
    fail_msg: "Fail2ban service is not running - security may be compromised"
    success_msg: "Fail2ban service is running"
  when: 
    - deploy_environment == "production"
    - fail2ban_service is defined
    - fail2ban_service is not skipped
  ignore_errors: "{{ deploy_environment == 'testing' }}"
  tags: [verify, fail2ban]

- name: Check Docker service
  systemd:
    name: docker
  register: docker_service
  tags: [verify, docker]

- name: Verify Docker is running
  assert:
    that:
      - docker_service.status.ActiveState == "active"
    fail_msg: "Docker service is not running"
    success_msg: "Docker service is running"
  tags: [verify, docker]

- name: Test Docker functionality
  command: docker ps
  register: docker_ps
  changed_when: false
  become_user: deploy
  tags: [verify, docker]

- name: Check Caddy service
  systemd:
    name: caddy
  register: caddy_service
  ignore_errors: yes
  tags: [verify, caddy]

- name: Verify Caddy is running
  assert:
    that:
      - caddy_service.status.ActiveState == "active"
    fail_msg: "Caddy service is not running"
    success_msg: "Caddy service is running"
  when: caddy_service is not failed
  tags: [verify, caddy]

- name: Verify critical ports are listening
  wait_for:
    port: "{{ item }}"
    host: 0.0.0.0
    timeout: 5
  loop: "{{ firewall_allowed_tcp_ports }}"
  ignore_errors: yes
  register: port_check
  tags: [verify, ports]

- name: Display port check results
  debug:
    msg: "Port {{ item.item }} is {{ 'open' if item is not failed else 'closed' }}"
  loop: "{{ port_check.results }}"
  when: port_check is defined
  tags: [verify, ports]

- name: Check system updates (production only)
  command: apt list --upgradable
  register: upgradable_packages
  changed_when: false
  when: 
    - ansible_os_family == "Debian"
    - deploy_environment == "production"
  tags: [verify, updates]

- name: Count upgradable packages
  set_fact:
    upgradable_count: "{{ upgradable_packages.stdout_lines | length - 1 }}"
  when: 
    - upgradable_packages is defined
    - upgradable_packages is not skipped
  tags: [verify, updates]

- name: Warn about pending updates
  debug:
    msg: "WARNING: {{ upgradable_count }} packages have pending updates"
  when: 
    - upgradable_count is defined
    - upgradable_count | int > 10
  tags: [verify, updates]

- name: Verify sudo access for deploy user
  become: yes
  become_user: deploy
  command: sudo -n true
  register: sudo_check
  changed_when: false
  ignore_errors: yes
  tags: [verify, sudo]

- name: Assert sudo access is configured
  assert:
    that:
      - sudo_check.rc == 0
    fail_msg: "Deploy user does not have passwordless sudo access"
    success_msg: "Deploy user has proper sudo access"
  tags: [verify, sudo]

- name: Check disk usage
  command: df -h /
  register: disk_usage
  changed_when: false
  tags: [verify, disk]

- name: Parse disk usage
  set_fact:
    disk_used_percent: "{{ disk_usage.stdout_lines[1].split()[4].rstrip('%') }}"
  when: disk_usage is defined
  tags: [verify, disk]

- name: Warn about disk space
  debug:
    msg: "WARNING: Disk usage is {{ disk_used_percent }}%"
  when: 
    - disk_used_percent is defined
    - disk_used_percent | int > 80
  tags: [verify, disk]

- name: Generate security verification summary
  debug:
    msg:
      - "===== Security Verification Summary ====="
      - "Environment: {{ deploy_environment }}"
      - "SSH Service: {{ 'Running' if ssh_service.status.ActiveState == 'active' else 'Not Running' }}"
      - "Firewall: {{ 'Active' if 'Status: active' in (ufw_status.stdout | default('')) else 'Inactive' }}"
      - "Docker: {{ 'Running' if docker_service.status.ActiveState == 'active' else 'Not Running' }}"
      - "Caddy: {{ 'Running' if caddy_service.status.ActiveState == 'active' else 'Not Running' if caddy_service is defined else 'Not Installed' }}"
      - "Fail2ban: {{ 'Running' if deploy_environment == 'production' and fail2ban_service is defined and fail2ban_service.status.ActiveState == 'active' else 'Not Required' if deploy_environment == 'testing' else 'Not Running' }}"
      - "Disk Usage: {{ disk_used_percent | default('Unknown') }}%"
      - "========================================="
  tags: [verify, summary]

- name: Create verification report file
  copy:
    content: |
      Security Verification Report
      Generated: {{ ansible_date_time.iso8601 }}
      Environment: {{ deploy_environment }}
      Host: {{ inventory_hostname }}
      
      Service Status:
      - SSH: {{ 'OK' if ssh_service.status.ActiveState == 'active' else 'FAIL' }}
      - Firewall: {{ 'OK' if 'Status: active' in (ufw_status.stdout | default('')) else 'FAIL' }}
      - Docker: {{ 'OK' if docker_service.status.ActiveState == 'active' else 'FAIL' }}
      - Caddy: {{ 'OK' if caddy_service is defined and caddy_service.status.ActiveState == 'active' else 'N/A' }}
      - Fail2ban: {{ 'OK' if deploy_environment == 'production' and fail2ban_service is defined and fail2ban_service.status.ActiveState == 'active' else 'N/A' }}
      
      System Status:
      - Disk Usage: {{ disk_used_percent | default('Unknown') }}%
      - Pending Updates: {{ upgradable_count | default('Unknown') }}
      
      Verification completed successfully.
    dest: /var/log/ansible-security-verify-{{ ansible_date_time.epoch }}.log
    mode: '0644'
  when: deploy_environment == "production"
  tags: [verify, report]
