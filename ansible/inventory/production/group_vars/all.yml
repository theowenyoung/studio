---
# =====================================
# 生产环境专用配置
# =====================================
deploy_environment: production
admin_email: "owen@owenyoung.com"
base_domain: "owenyoung.com"

# SSH 密钥（生产环境）
deploy_ssh_keys:
  - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINAPcRy9wGjP47bHpv2RcNO3yw3udCcTlgWs22KLcpUW main@example.com"


# 基础必装包
common_packages:
  - curl
  - wget
  - vim
  - htop             # 系统监控工具
  - tree             # 目录树显示工具
  - unzip            # 解压工具

# 只覆盖必要的配置，其余使用默认值
# =====================================
# 用户配置（仅必要项）
# =====================================
users_user_list:
  - name: deploy
    groups: [sudo, docker]
    sudo_options: "ALL=(ALL) NOPASSWD: ALL"
    authorized_keys: "{{ deploy_ssh_keys }}"

# =====================================
# SSH 配置（仅关键安全项）
# =====================================
sshd:
  PermitRootLogin: "no"
  PasswordAuthentication: "no"

# =====================================
# 安全配置（geerlingguy.security）
# =====================================
# 启用 fail2ban 安装和配置
security_fail2ban_enabled: true
security_sudoers_passwordless: ["deploy"]



# =====================================
# 防火墙（geerlingguy.firewall 配置）
# =====================================
# 禁用冲突的防火墙服务
firewall_disable_firewalld: true
firewall_disable_ufw: true

# 允许的端口配置
firewall_allowed_tcp_ports:
  - "22"    # SSH
  - "80"    # HTTP
  - "443"   # HTTPS

firewall_allowed_udp_ports:
  - "443"   # QUIC/HTTP3

# 防火墙服务状态
firewall_state: started
firewall_enabled_at_boot: true

# =====================================
# Docker
# =====================================
docker_users:
  - deploy

# =====================================
# 多应用配置
# =====================================
applications:
  # 需要PostgreSQL的应用
  - name: myapp
    port: 3000
    directory: js-apps/bun-demo6
    git_repo: "https://github.com/theowenyoung/studio"
    git_branch: main
    domain: "demo-0907.{{ base_domain }}"
    services:
      postgresql:
        enabled: true
        database: "myapp_prod"
        user: "myapp_user"
        password: "{{ vault_myapp_db_password | default('change-me-in-production') }}"
      redis:
        enabled: true
    env:
      SECRET_KEY: "{{ vault_myapp_secret_key | default('change-me-in-production') }}"
      LOG_LEVEL: info

  # 示例：只需要Redis的应用（注释掉，需要时取消注释）
  # - name: cache-service
  #   port: 3001
  #   directory: js-apps/cache-service
  #   git_repo: "https://github.com/theowenyoung/studio"
  #   git_branch: main
  #   domain: "cache.{{ base_domain }}"
  #   services:
  #     postgresql:
  #       enabled: false
  #     redis:
  #       enabled: true
  #   env:
  #     LOG_LEVEL: debug

  # 示例：纯静态站点（注释掉，需要时取消注释）
  # - name: static-site
  #   port: 3002
  #   directory: js-apps/static-site
  #   git_repo: "https://github.com/theowenyoung/studio"
  #   git_branch: main
  #   domain: "static.{{ base_domain }}"
  #   services:
  #     postgresql:
  #       enabled: false
  #     redis:
  #       enabled: false
  #   env:
  #     NODE_ENV: production

# =====================================
# Caddy 配置（动态生成）
# =====================================
caddy_email: "{{ admin_email }}"

# 为每个应用自动生成Caddy站点配置
caddy_sites: |
  {%- set sites = [] -%}
  {%- for app in applications -%}
    {%- set site_config = "reverse_proxy localhost:" + app.port|string -%}
    {%- if app.directory == 'js-apps/static-site' -%}
      {%- set site_config = "root * /app/public\nfile_server\nencode gzip" -%}
    {%- endif -%}
    {%- set _ = sites.append({
        'domain': app.domain,
        'config': site_config
    }) -%}
  {%- endfor -%}
  {{ sites }}

caddy_config: |
  {
    email {{ caddy_email }}
  }
  
  {% for site in caddy_sites %}
  {{ site.domain }} {
    {{ site.config | indent(4) }}
  }
  {% endfor %}

# =====================================
# PostgreSQL 配置 (geerlingguy.postgresql)
# =====================================


# PostgreSQL role 配置
postgresql_version: "17"
postgresql_data_dir: "/var/lib/postgresql/{{ postgresql_version }}/main"
postgresql_bin_path: "/usr/lib/postgresql/{{ postgresql_version }}/bin"
postgresql_config_path: "/etc/postgresql/{{ postgresql_version }}/main"
postgresql_daemon: "postgresql"
postgresql_packages:
  - postgresql-{{ postgresql_version }}
  - postgresql-contrib-{{ postgresql_version }}
  - libpq-dev

# 动态生成PostgreSQL数据库配置（只为需要PostgreSQL的应用）
postgresql_databases: |
  {%- set dbs = [] -%}
  {%- for app in applications -%}
    {%- if app.services.postgresql.enabled -%}
      {%- set _ = dbs.append({
          'name': app.services.postgresql.database,
          'owner': app.services.postgresql.user
      }) -%}
    {%- endif -%}
  {%- endfor -%}
  {{ dbs }}

# 动态生成PostgreSQL用户配置（只为需要PostgreSQL的应用）
postgresql_users: |
  {%- set users = [] -%}
  {%- for app in applications -%}
    {%- if app.services.postgresql.enabled -%}
      {%- set _ = users.append({
          'name': app.services.postgresql.user,
          'password': app.services.postgresql.password,
          'priv': app.services.postgresql.database + ':ALL'
      }) -%}
    {%- endif -%}
  {%- endfor -%}
  {{ users }}

# PostgreSQL 连接配置
postgresql_hba_entries:
  - {type: local, database: all, user: postgres, auth_method: peer}
  - {type: local, database: all, user: all, auth_method: peer}
  - {type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: md5}
  - {type: host, database: all, user: all, address: '::1/128', auth_method: md5}

# =====================================
# Redis 配置 (geerlingguy.redis)
# =====================================
redis_password: "{{ vault_redis_password | default('') }}"
redis_version: "7.0"
redis_port: "6379"
redis_bind_interface: "127.0.0.1"
redis_timeout: 300
redis_tcp_keepalive: 60
redis_maxmemory: "256mb"
redis_maxmemory_policy: "allkeys-lru"
redis_save:
  - 900 1
  - 300 10
  - 60 10000
redis_appendonly: "yes"
redis_appendfsync: "everysec"

