---
# =====================================
# PostgreSQL 独立部署
# 完全自包含，最小依赖
# =====================================
- name: Deploy Standalone PostgreSQL
  hosts: all
  gather_facts: yes
  become: yes
  
  tasks:
    - name: 显示 PostgreSQL 部署信息
      debug:
        msg:
          - "部署独立 PostgreSQL 服务"
          - "数据目录: /data/postgres"
          - "网络: shared_network"
          - "端口: 127.0.0.1:5432"
      tags: [info]

    - name: 创建 PostgreSQL 目录
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      loop:
        # 服务配置目录
        - { path: "/srv/postgres", owner: "{{ deploy_user | default('deploy') }}", group: "{{ deploy_user | default('deploy') }}", mode: "0755" }
        - { path: "/srv/postgres/init", owner: "{{ deploy_user | default('deploy') }}", group: "{{ deploy_user | default('deploy') }}", mode: "0755" }
        # 数据目录（PostgreSQL需要999用户ID）
        - { path: "/data/postgres", owner: "{{ deploy_user | default('deploy') }}", group: "{{ deploy_user | default('deploy') }}", mode: "0755" }
        - { path: "/data/postgres/data", owner: "999", group: "{{ deploy_user | default('deploy') }}", mode: "0750" }
        # 备份目录（PostgreSQL 负责创建）
        - { path: "/data/backups", owner: "{{ deploy_user | default('deploy') }}", group: "{{ deploy_user | default('deploy') }}", mode: "0755" }
        - { path: "/data/backups/postgres", owner: "{{ deploy_user | default('deploy') }}", group: "{{ deploy_user | default('deploy') }}", mode: "0755" }
      tags: [setup]

    # 从 AWS Parameter Store 获取密码
    - name: 获取 PostgreSQL 管理员密码
      command: >
        aws ssm get-parameter
        --name "/postgres/.env.prod"
        --with-decryption
        --output text
        --query 'Parameter.Value'
        --region {{ aws_region | default('us-west-2') }}
      register: postgres_password_result
      changed_when: false
      failed_when: postgres_password_result.rc != 0
      delegate_to: localhost
      become: false
      tags: [secrets]

    - name: 创建 PostgreSQL 环境文件
      copy:
        content: |
          # PostgreSQL 环境变量
          {{ postgres_password_result.stdout }}
        dest: /srv/postgres/.env
        owner: "{{ deploy_user | default('deploy') }}"
        group: "{{ deploy_user | default('deploy') }}"
        mode: '0600'
      no_log: true
      tags: [secrets]

    # 生成独立的 docker-compose.yml
    - name: 生成 PostgreSQL Docker Compose 配置
      template:
        src: postgres-standalone.yml.j2
        dest: /srv/postgres/docker-compose.yml
        owner: "{{ deploy_user | default('deploy') }}"
        group: "{{ deploy_user | default('deploy') }}"
        mode: '0644'
      tags: [config]

    # 可选：生成数据库初始化脚本
    - name: 生成数据库初始化脚本（可选）
      copy:
        content: |
          -- PostgreSQL 初始化脚本
          -- 创建常用扩展
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          CREATE EXTENSION IF NOT EXISTS "pgcrypto";
          CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
          
          -- 创建监控用户
          DO $$
          BEGIN
              IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'monitor') THEN
                  CREATE USER monitor WITH PASSWORD 'monitor';
              END IF;
          END
          $$;
          GRANT pg_monitor TO monitor;
        dest: /srv/postgres/init/01-extensions.sql
        owner: "{{ deploy_user | default('deploy') }}"
        group: "{{ deploy_user | default('deploy') }}"
        mode: '0644'
      tags: [init]

    # 部署服务
    - name: 启动 PostgreSQL 服务
      community.docker.docker_compose_v2:
        project_src: /srv/postgres
        state: present
        pull: always
      become_user: "{{ deploy_user | default('deploy') }}"
      tags: [deploy]

    - name: 等待 PostgreSQL 服务就绪
      wait_for:
        port: 5432
        host: 127.0.0.1
        timeout: 60
      tags: [verify]

    - name: 验证 PostgreSQL 服务
      command: docker compose exec -T postgres pg_isready -U postgres
      args:
        chdir: /srv/postgres
      register: pg_ready
      changed_when: false
      become_user: "{{ deploy_user | default('deploy') }}"
      tags: [verify]

    - name: 显示部署结果
      debug:
        msg:
          - "✅ PostgreSQL 部署完成"
          - "连接: postgresql://postgres:***@127.0.0.1:5432/postgres"
          - "配置目录: /srv/postgres"
          - "数据目录: /data/postgres"  
          - "管理: cd /srv/postgres && docker compose"
          - "日志: cd /srv/postgres && docker compose logs postgres"
      tags: [info]
