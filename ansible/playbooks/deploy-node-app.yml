---
# =====================================
# Node.js 应用部署
# 通用 Node.js 应用部署 playbook
# =====================================
- name: Deploy Node.js Application
  hosts: all
  gather_facts: yes
  become: yes
  
  vars:
    app_name: "{{ app }}"  # 必须参数：应用名 (node-demo, 等)
    deploy_environment: "{{ env | default('production') }}"  # 部署环境: local, aws, production
    build_image: "{{ build | default(true) }}"  # 是否构建镜像
    
  tasks:
    - name: 验证应用名称
      fail:
        msg: "请指定应用名称: --extra-vars app=node-demo"
      when: app_name is not defined or app_name == ""
      
    - name: 验证应用部署脚本存在
      local_action:
        module: stat
        path: "{{ playbook_dir }}/../../js-apps/{{ app_name }}/deploy.sh"
      register: app_deploy_script_stat
      become: false
      
    - name: 应用部署脚本不存在时失败
      fail:
        msg: "应用 {{ app_name }} 的部署脚本不存在: js-apps/{{ app_name }}/deploy.sh"
      when: not app_deploy_script_stat.stat.exists

    - name: 验证应用配置文件存在
      local_action:
        module: stat
        path: "{{ playbook_dir }}/../../js-apps/{{ app_name }}/package.json"
      register: app_config_stat
      become: false
      
    - name: 应用配置不存在时失败
      fail:
        msg: "应用 {{ app_name }} 的配置不存在: js-apps/{{ app_name }}/package.json"
      when: not app_config_stat.stat.exists

    - name: 显示部署计划
      debug:
        msg:
          - "=== Node.js 应用部署 ==="
          - "应用名称: {{ app_name }}"
          - "部署环境: {{ deploy_environment }}"
          - "构建镜像: {{ build_image }}"
          - "数据目录: /data/"
          - "共享网络: shared_network"
          - "========================="
      tags: [info]

    - name: 检查共享网络是否存在
      command: docker network inspect shared_network
      register: network_check
      changed_when: false
      failed_when: false
      become_user: "{{ deploy_user | default('deploy') }}"
      tags: [verify]

    - name: 创建共享网络（如果不存在）
      command: docker network create shared_network
      when: network_check.rc != 0
      become_user: "{{ deploy_user | default('deploy') }}"
      tags: [network]

    - name: 停止现有应用容器（如果存在）
      script: "{{ playbook_dir }}/../../js-apps/{{ app_name }}/deploy.sh"
      args:
        chdir: "{{ playbook_dir }}/../../js-apps/{{ app_name }}"
      environment:
        ENV_MODE: "{{ deploy_environment }}"
        AWS_REGION: "{{ aws_region | default('us-west-2') }}"
        DEPLOY_USER: "{{ deploy_user | default('deploy') }}"
      register: app_stop_result
      failed_when: false
      become_user: "{{ deploy_user | default('deploy') }}"
      tags: [stop]
      when: deploy_environment != 'local'
      vars:
        ansible_python_interpreter: "{{ ansible_playbook_python }}"
      script: |
        #!/bin/bash
        set -e
        export ENV_MODE="{{ deploy_environment }}"
        ./deploy.sh down || true

    - name: 构建应用镜像
      script: "{{ playbook_dir }}/../../js-apps/{{ app_name }}/deploy.sh"
      args:
        chdir: "{{ playbook_dir }}/../../js-apps/{{ app_name }}"
      environment:
        ENV_MODE: "{{ deploy_environment }}"
        AWS_REGION: "{{ aws_region | default('us-west-2') }}"
        DEPLOY_USER: "{{ deploy_user | default('deploy') }}"
      register: app_build_result
      become_user: "{{ deploy_user | default('deploy') }}"
      tags: [build]
      when: build_image | bool
      vars:
        ansible_python_interpreter: "{{ ansible_playbook_python }}"
      script: |
        #!/bin/bash
        set -e
        export ENV_MODE="{{ deploy_environment }}"
        ./deploy.sh build

    - name: 部署 Node.js 应用
      script: "{{ playbook_dir }}/../../js-apps/{{ app_name }}/deploy.sh"
      args:
        chdir: "{{ playbook_dir }}/../../js-apps/{{ app_name }}"
      environment:
        ENV_MODE: "{{ deploy_environment }}"
        AWS_REGION: "{{ aws_region | default('us-west-2') }}"
        DEPLOY_USER: "{{ deploy_user | default('deploy') }}"
        NODE_ENV: "{{ node_env | default('production') }}"
      register: app_deploy_result
      become_user: "{{ deploy_user | default('deploy') }}"
      tags: [deploy]
      vars:
        ansible_python_interpreter: "{{ ansible_playbook_python }}"
      script: |
        #!/bin/bash
        set -e
        export ENV_MODE="{{ deploy_environment }}"
        export NODE_ENV="{{ node_env | default('production') }}"
        ./deploy.sh up

    - name: 等待应用启动
      uri:
        url: "http://localhost:3000/health"
        method: GET
        status_code: 200
      register: health_check
      retries: 10
      delay: 5
      ignore_errors: yes
      tags: [verify]

    - name: 显示部署结果
      debug:
        msg:
          - "=== 部署完成 ==="
          - "应用: {{ app_name }}"
          - "状态: {{ 'SUCCESS' if health_check is succeeded else 'FAILED' }}"
          - "健康检查: {{ 'PASSED' if health_check is succeeded else 'FAILED' }}"
          - "访问地址: http://{{ inventory_hostname }}:3000"
          - "健康检查: http://{{ inventory_hostname }}:3000/health"
      tags: [result]

    - name: 部署失败时显示日志
      script: "{{ playbook_dir }}/../../js-apps/{{ app_name }}/deploy.sh"
      args:
        chdir: "{{ playbook_dir }}/../../js-apps/{{ app_name }}"
      environment:
        ENV_MODE: "{{ deploy_environment }}"
      register: app_logs_result
      become_user: "{{ deploy_user | default('deploy') }}"
      when: health_check is failed
      tags: [debug]
      vars:
        ansible_python_interpreter: "{{ ansible_playbook_python }}"
      script: |
        #!/bin/bash
        set -e
        export ENV_MODE="{{ deploy_environment }}"
        ./deploy.sh logs | tail -50
