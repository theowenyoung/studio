[tools]
python = "latest"
zig = "latest"
bun = "latest"

[env]
# AWS ECR registry
ECR_REGISTRY = "912951144733.dkr.ecr.us-west-2.amazonaws.com"

# ===============================================
# 初始化任务
# ===============================================

[tasks.pre]
description = "初始化新服务器"
run = """
rsync -chazP ./scripts/create-init-user.sh {{arg(name="user", default="root")}}@{{arg(name="server_ip")}}:
ssh {{arg(name="user", default="root")}}@{{arg(name="server_ip")}} 'bash create-init-user.sh'
"""

[tasks.setup]
description = "设置开发环境"
run = "pip install -r requirements-dev.txt"

[tasks.dev]
description = "运行开发应用 (Bun)"
run = """
cd js-apps/{{arg(name="app_name")}}
bun run dev
"""

[tasks.nodedev]
description = "运行 Node.js 开发应用 (pnpm workspace)"
run = """
pnpm --filter {{arg(name="app_name")}} dev
"""

[tasks.pnpmdev]
description = "使用 pnpm workspace 运行开发应用"
run = """
pnpm --filter {{arg(name="app_name")}} dev
"""

[tasks.build]
description = "构建应用 (Bun)"
run = """
cd js-apps/{{arg(name="app_name")}}
bun run build
"""

[tasks.pnpmbuild]
description = "使用 pnpm workspace 构建应用"
run = """
pnpm --filter {{arg(name="app_name")}} build
"""

[tasks.pnpminstall]
description = "安装所有 workspace 依赖"
run = """
pnpm install
"""

[tasks.test]
description = "运行测试"
run = """
cd js-apps/{{arg(name="app_name")}}
bun test
"""

# ===============================================
# Docker 相关
# ===============================================

[tasks.login-ecr]
description = "登录 ECR"
run = "aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $ECR_REGISTRY"

[tasks.deploy-hello]
description = "部署 hello world"
run = "ansible-playbook ansible/playbooks/bun-hello.yml -i ansible/inventory.ini"

# ===============================================
# 服务器初始化
# ===============================================

[tasks.bootstrapserver]
description = "初始化服务器"
run = "ansible-playbook ansible/playbooks/bootstrap.yml -i ansible/inventory.ini --ask-pass"

[tasks.bootstrapserverwithoutpass]
description = "初始化服务器（无密码）"
run = "ansible-playbook ansible/playbooks/infra.yml"

# ===============================================
# 本地开发环境
# ===============================================

[tasks.setup-local]
description = "一键设置本地开发环境（包含 mkcert）"
run = """
echo "🚀 设置本地开发环境..."

# 安装 mkcert（如果未安装）
if ! command -v mkcert &> /dev/null; then
  echo "📦 安装 mkcert..."
  if [[ "$OSTYPE" == "darwin"* ]] && command -v brew &> /dev/null; then
    brew install mkcert
  else
    echo "❌ 请手动安装 mkcert:"
    echo "  macOS: brew install mkcert"
    echo "  Linux: https://github.com/FiloSottile/mkcert#installation"
    exit 1
  fi
fi

mkcert -install

cd infra-apps/caddy/certs
mkcert localhost app.localhost
"""


[tasks.service]
description = "启动完整本地开发环境"
run = """
echo "🚀 启动本地开发环境..."

# 创建共享网络（如果不存在）
if ! docker network ls | grep -q "shared_network"; then
  echo "📡 创建共享网络..."
  docker network create shared_network
fi

# 启动基础设施服务
echo "💾 启动基础设施服务..."
cd infra-apps/postgres && docker compose up -d
cd ../redis && docker compose up -d  
cd ../caddy && docker compose up -d
"""

[tasks.down]
description = "停止本地开发环境"
run = """
echo "🛑 停止本地开发环境..."
cd infra-apps/caddy && docker compose down
cd ../redis && docker compose down  
cd ../postgres && docker compose down
echo "✅ 本地开发环境已停止"
"""

[tasks.restart]
description = "重启本地开发环境"
run = """
mise down
sleep 2
mise service
"""

[tasks.status]
description = "查看本地服务状态"
run = """
echo "📊 本地服务状态:"
echo ""
echo "🐳 Docker 容器:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(postgres|redis|caddy|app|admin|api)"
echo ""
echo "🌐 网络连接:"
docker network inspect shared_network --format '{{range .Containers}}{{.Name}} {{end}}' 2>/dev/null || echo "shared_network 不存在"
"""

[tasks.logs]
description = "查看服务日志"
run = """
SERVICE={{arg(name='service', default='app')}}
echo "📜 查看 $SERVICE 服务日志..."
case $SERVICE in
  postgres) cd infra-apps/postgres && docker compose logs -f ;;
  redis) cd infra-apps/redis && docker compose logs -f ;;
  caddy) cd infra-apps/caddy && docker compose logs -f ;;
  *) echo "❌ 未知服务: $SERVICE" && echo "可用服务: postgres, redis, caddy, app, admin-app, api-service" ;;
esac
"""

# ===============================================
# 单独服务管理
# ===============================================

[tasks.dev-postgres]
description = "启动本地 PostgreSQL"
run = "cd infra-apps/postgres && ENV_MODE=local ./deploy.sh"

[tasks.dev-redis]
description = "启动本地 Redis"
run = "cd infra-apps/redis && ENV_MODE=local ./deploy.sh"

[tasks.dev-caddy]
description = "启动本地 Caddy"
run = "cd infra-apps/caddy && ENV_MODE=local ./deploy.sh"

# ===============================================
# 数据库任务管理
# ===============================================

[tasks.db-task]
description = "执行数据库任务"
run = """
TASK_FILE={{arg(name='task_file')}}
if [ -z "$TASK_FILE" ]; then
  echo "请指定任务文件名"
  echo "用法: mise db-task task_file=<文件名>"
  exit 1
fi
cd infra-apps/database-tasks && ENV_MODE=local ./deploy.sh run $TASK_FILE
"""

[tasks.db-list]
description = "列出可用的数据库任务"
run = "cd infra-apps/database-tasks && ENV_MODE=local ./deploy.sh list"

# ===============================================
# 生产环境部署
# ===============================================

[tasks.deploy-postgres]
description = "部署 PostgreSQL 到生产环境"
run = "cd infra-apps/postgres && ENV_MODE=aws ./deploy.sh"

[tasks.deploy-redis]
description = "部署 Redis 到生产环境"
run = "cd infra-apps/redis && ENV_MODE=aws ./deploy.sh"

[tasks.deploy-caddy]
description = "部署 Caddy 到生产环境"
run = "cd infra-apps/caddy && ENV_MODE=aws ./deploy.sh"

[tasks.deploy-app]
description = "部署应用到生产环境"
run = "cd infra-apps/app && ENV_MODE=aws ./deploy.sh"

[tasks.deploy-all]
description = "部署所有服务到生产环境"
run = """
echo "🚀 开始完整生产环境部署..."

echo "📊 部署基础设施..."
mise deploy-postgres
mise deploy-redis
mise deploy-caddy

echo "🚀 部署应用..."
mise deploy-app

echo "✅ 生产环境部署完成！"
"""

# ===============================================
# Ansible 兼容任务（向后兼容）
# ===============================================

[tasks.postgres]
description = "部署 PostgreSQL (Ansible)"
run = "ansible-playbook ansible/playbooks/deploy-postgres-infra.yml"

[tasks.redis]
description = "部署 Redis (Ansible)"
run = "ansible-playbook ansible/playbooks/deploy-redis-infra.yml"

[tasks.caddy]
description = "部署 Caddy (Ansible)"
run = "ansible-playbook ansible/playbooks/deploy-caddy-infra.yml"

[tasks.run-db-task]  
description = "执行数据库任务 (Ansible)"
run = """
TASK_FILE={{arg(name='task_file')}}
ansible-playbook ansible/playbooks/deploy-database-tasks-infra.yml \
  --extra-vars "task_name=$TASK_FILE"
"""




[tasks.builddocker]
description = "构建 Docker 镜像"
run = """
APP_NAME={{arg(name="app_name", default="bun-demo")}}
echo "🔨 构建应用: $APP_NAME"

case $APP_NAME in
  bun-demo)
    echo "📦 使用 Bun 镜像构建..."
    docker build --platform linux/amd64 --target app --build-arg APP=bun-demo -t bun-demo -f ./docker/bun/Dockerfile .
    ;;
  node-demo)
    echo "📦 使用 Node.js + PNPM 镜像构建..."
    docker build --platform linux/amd64 --target app -t node-demo -f ./js-apps/node-demo/Dockerfile.pnpm .
    ;;
  *)
    echo "❌ 未知应用: $APP_NAME"
    echo "支持的应用: bun-demo, node-demo"
    exit 1
    ;;
esac

echo "✅ 构建完成: $APP_NAME"
"""
